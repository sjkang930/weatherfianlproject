// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Weather.Models;

#nullable disable

namespace Weather.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FavoriteWeatherUser", b =>
                {
                    b.Property<Guid>("FavoriteWeathersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersUserId")
                        .HasColumnType("uuid");

                    b.HasKey("FavoriteWeathersId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("FavoriteWeatherUser");
                });

            modelBuilder.Entity("FavoriteWeatherWeatherData", b =>
                {
                    b.Property<Guid>("FavoriteWeathersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WeatherDatasId")
                        .HasColumnType("uuid");

                    b.HasKey("FavoriteWeathersId", "WeatherDatasId");

                    b.HasIndex("WeatherDatasId");

                    b.ToTable("FavoriteWeatherWeatherData");
                });

            modelBuilder.Entity("Weather.Models.FavoriteWeather", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("FavoriteWeathers");
                });

            modelBuilder.Entity("Weather.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Weather.Models.WeatherData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<double?>("Humidity")
                        .HasColumnType("double precision");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Precipitation")
                        .HasColumnType("text");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.Property<string>("WeatherDescription")
                        .HasColumnType("text");

                    b.Property<double?>("WindSpeed")
                        .HasColumnType("double precision");

                    b.Property<double?>("clouds")
                        .HasColumnType("double precision");

                    b.Property<double?>("feels_like")
                        .HasColumnType("double precision");

                    b.Property<double?>("lat")
                        .HasColumnType("double precision");

                    b.Property<double?>("lon")
                        .HasColumnType("double precision");

                    b.Property<double?>("rain")
                        .HasColumnType("double precision");

                    b.Property<double?>("sunrise")
                        .HasColumnType("double precision");

                    b.Property<double?>("sunset")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("WeatherDatas");
                });

            modelBuilder.Entity("FavoriteWeatherUser", b =>
                {
                    b.HasOne("Weather.Models.FavoriteWeather", null)
                        .WithMany()
                        .HasForeignKey("FavoriteWeathersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weather.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FavoriteWeatherWeatherData", b =>
                {
                    b.HasOne("Weather.Models.FavoriteWeather", null)
                        .WithMany()
                        .HasForeignKey("FavoriteWeathersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weather.Models.WeatherData", null)
                        .WithMany()
                        .HasForeignKey("WeatherDatasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Weather.Models.WeatherData", b =>
                {
                    b.HasOne("Weather.Models.User", "User")
                        .WithMany("WeatherDatas")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Weather.Models.User", b =>
                {
                    b.Navigation("WeatherDatas");
                });
#pragma warning restore 612, 618
        }
    }
}
